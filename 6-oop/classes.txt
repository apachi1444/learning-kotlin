- to pass the vars in the constructor

class User(name : String , age : Int){
    // these are properties of the class
    // properties can't stay uninitialized
    // !! val name : String !! -> error !
    // properties form the state of our objects !
    val name = name
    val age = age
}

// we can directly pass the properties to the constructor
class User(val name : String , val age : Int){

}

// we can also pass in the class named and default properties
class User(val name : String = "No Name" , val age : Int)
val user = User(age = 60)

---------- init block --------------------------------
when the object is created the init block gets executed !
class User(name : String = "No Name" , val age : Int){
    val name : String
    init{
        if ( name.isBlank()){
            this.name = "No Name"
        }else{
            this.name = name.trim()
        }
    }

    // we can add some other blocks init
    // and all these treatments will be in the compilation 
    // in the constructor body of our class !

}

- if the class does not have a primary or secondary constructor
the compiler will generate by default a constructor with no arguments

- class Members are : 
    * constructors and initializers blocks
    * functions
    * properties
    * nested and inner classes
    * objects declarations

- Even if the class has no primary constructor, the delegation 
still happens implicitly, and the initializer blocks are still 
executed

class Constructors {
    init {
        println("Init block")
    }

    constructor(i: Int) {
        println("Constructor $i")
    }
}

// this is the delegation function
constructor(name: String, parent: Person) : this(name) {
        parent.children.add(this)
}